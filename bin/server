#!/usr/bin/env ruby

$:.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))

require 'encrypted_instant_messaging'

require 'socket'
require 'engine'
require 'logger'

class ServerHelper
	include EncryptedInstantMessaging::Engine

	def initialize
		@client_manager = ClientManager.new
		@logger = Logger.new(STDOUT)
		@logger.level = Logger::DEBUG
	end

	def handle_connection(client)
		@client_manager.add_client(client)
		sock_domain, remote_port, remote_hostname, remote_ip = client.peeraddr

		begin
			@logger.info "New Connection Established From #{remote_ip}:#{remote_port}"
			continue = true
			
			# keep pushing out send and receive threads until the user enters a blank line
			# then close the connection
			while continue and !client.closed?
			
				# hard cap on incoming data (buffer)
				# NOTE: Changing this will determine how much data can be accepted at a time
				# before the blocks get fragmented and bad things happen. For example, with a size
				# of 100,000 you can send 4000 A's in a single msg, but you wouldn't be able to do that
				# with size 1000. You would just get a decrypt error because you're trying to decrypt
				# only a subset of the entire message when you need to do it all.
				cipher_text = client.recv(5000)		
		
				if cipher_text != nil and cipher_text != '' then
					@client_manager.broadcast_messages(cipher_text, client)
				# this condition is reached when the user hit just the enter key instead of a msg
				elsif client.eof?
					@logger.debug "EOF Detected!"
					continue = false
					next
				else
					@logger.warn "Client Sent #{cipher_text}, but I don't know what to do with it"
					next
				end
			end
		rescue Exception => e
			@logger.fatal e.message
			@logger.fatal e.backtrace.inspect
		ensure
			@logger.debug "Closing Connection from #{remote_ip}:#{remote_port}"
			client.close if not client.closed?
			@client_manager.remove_client(client)
		end
	end
end

if ARGV.length != 2 then
	puts "usage: #{$0} [local host] [local port]"
	exit
end

local_host, local_port = ARGV
debug = true


socket = TCPServer.new(local_host, local_port)
helper = ServerHelper.new

loop do
  client = socket.accept
  Thread.new { helper.handle_connection(client) }
end
